#!/usr/bin/python3
# title             :Project.py
# description       :Ontwikkel een zo efficiÃ«ntmogelijke parallelle Monte Carlo sampler voor N atomen die interageren met een Lennard - Jones potentiaal
# ======================================================================================================================

# Importing libraries ==================================================================================================

import random 
import math
import copy
import numpy as np
#import os


# The actual script ====================================================================================================
# Np arrays insteken voor speed up, maar kunnen niet leeg zijn :( => volgende keer

# Parameters
r = 5
steps = 10
getallenLijst = []
atomenLijst = []
energieLijst = []
aantalAtomen = 15

# Bepaal een random getal en voeg ze toe in de getallenLijst
def randomnummer(m=100, a=21, c=31):
    if len(getallenLijst) == 0:
        print("Voer een startgetal in:")
        getallenLijst.append(int(input()))
    else:
        getallenLijst.append((a * getallenLijst[-1] +c) % m)
    #print("dit is de getallenLijst: ", getallenLijst)
    return getallenLijst[-1]

# Lennard-Jones:
def LennardJones(r):
    tmp = 1.0 / (r*r*r*r*r*r)
    return tmp * (tmp-1)

# Energie van alle atomen in een configuratie
def energieConfiguratie(atomenLijst):
    energie = 0
    for eersteAtoom in range(0, len(atomenLijst) - 1):
        for tweedeAtoom in range(eersteAtoom + 1, len(atomenLijst)):  # Invoegen dat (& eersteAtoom < tweedeAtoom)
            if eersteAtoom < tweedeAtoom:
                afstand = afstandberekenen(atomenLijst[eersteAtoom], atomenLijst[tweedeAtoom])
                energie += LennardJones(afstand)
                #print("Voor de set", eersteAtoom, tweedeAtoom, "vinden we een LJ van:", LennardJones(afstand), "op een afstand:", afstand)
    print("De energie van deze configuratie is dan:", energie)
    return energie

# Energie van 1 atoom berekenen
def energieAtoom(atoominMC, atomenLijst, seed):
    energie = 0
    i = 0
    for atoom in atomenLijst: # We stellen atoom vast en itereren over alle andere atomen (=> i != seed)
        if i != seed:
            afstand = afstandberekenen(atoom, atoominMC) # Afstand berekenen tussen coordinaten van 2 atomen (1 locked, 1 variabel)
            energie += LennardJones(afstand)
            #print("Voor het", i, "de atoom met LJ:", LennardJones(afstand), "op een afstand van:", afstand)
        i += 1
    print("De energie van dit atoom is dan:", energie)
    return energie

# Afstand tussen 2 atomen
def afstandberekenen(eersteAtoom, tweedeAtoom):
    x_afstand = (eersteAtoom[0] - tweedeAtoom[0])*(eersteAtoom[0] - tweedeAtoom[0])
    y_afstand = (eersteAtoom[1] - tweedeAtoom[1])*(eersteAtoom[1] - tweedeAtoom[1])
    z_afstand = (eersteAtoom[2] - tweedeAtoom[2])*(eersteAtoom[2] - tweedeAtoom[2])
    return math.sqrt(x_afstand + y_afstand + z_afstand)


# Initialisatie van alle atomen:
for atoom in range(0, aantalAtomen):
    x_coord = randomnummer()
    y_coord = randomnummer()
    z_coord = randomnummer()
    atomenLijst.append([x_coord, y_coord, z_coord])
    print(atomenLijst)


# Initialisatie energie
totaleEnergieConfiguratie = energieConfiguratie(atomenLijst)
laagsteEnergieConfiguratie = totaleEnergieConfiguratie

# Monte Carlo
for step in range(0, steps):
    # Kies een atoom om te beschouw
    while randomnummer() > (aantalAtomen-1):
        randomnummer()
    seed = getallenLijst[-1]
    print("We bekijken nu atoomnummer:",seed)
    
    # Verplaats dit atoom en bekijk de energie
    atoominMC = copy.deepcopy(atomenLijst[seed])
    oudeEnergie = energieAtoom(atoominMC, atomenLijst, seed)
    atoominMC[0] += (randomnummer()*1/50-1)  # Stapjes van [-1,1[
    atoominMC[1] += (randomnummer()*1/50-1)
    atoominMC[2] += (randomnummer()*1/50-1)
    nieuweEnergie = energieAtoom(atoominMC, atomenLijst, seed)
    energieVerschil = nieuweEnergie - oudeEnergie

    if energieVerschil < 0:
        atomenLijst[seed] = atoominMC # Als er een lagere energie wordt bekomen wordt de configuratie bijgehouden
        print("Het energieverschil is negatief, namelijk:", energieVerschil, "De configuratie wordt bijgehouden;", atoominMC)
        laagsteEnergieConfiguratie += energieVerschil # De totale configuratie energie daalt dan met -energieVerschil, dit geeft de energie van de laagste energie configuratie aan

    totaleEnergieConfiguratie = energieVerschil + totaleEnergieConfiguratie # De totale energie van alle configuraties optellen
    standaardafwijking = 6  # Hier nog formule voor schrijven
    

gemiddeldeEnergieConfiguratie = totaleEnergieConfiguratie/steps
print(gemiddeldeEnergieConfiguratie)
print(laagsteEnergieConfiguratie)
print(standaardafwijking)

